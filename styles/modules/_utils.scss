
%header {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	padding-top: 20px;
	height: $toolbar-height;
	overflow: hidden;
}

%fullscreen, %fitContainer {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}
%noScroll {
	overflow: initial;
	-webkit-overflow-scrolling: auto;
			overflow-scrolling: auto;
}
%scroll {
	overflow-x: hidden;
	overflow-y: auto;
	-webkit-overflow-scrolling: touch;
			overflow-scrolling: touch;
}
%hscroll {
	overflow-x: auto;
	overflow-y: hidden;
	-webkit-overflow-scrolling: touch;
		overflow-scrolling: touch;
}
%center-flex-box{
	display: flex;
	display: -webkit-flex;
	-webkit-flex-direction: column;
		flex-direction: column;
	-webkit-justify-content: center;
		justify-content: center;
}


.overflow-scroll {
	@extend %scroll;
}
.overflow-scroll.horizontal {
	@extend %hscroll;
}

.swipe-back .overflow-scroll,
.deactivate .overflow-scroll,
.overflow-scroll.swipe-back,
.overflow-scroll.deactivate {
	overflow: hidden;
	-webkit-overflow-scrolling: auto !important;
		overflow-scrolling: auto !important;
}


// .hide {
// 	display: none;
// }

// http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32
@mixin respond-to($media) {
	@if $media == retina {
		@media ( -webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) { @content; }
	}
	@else if $media == smallPhone {
		@media only screen and ( max-height: 480px ) { @content; }
	}
	@else if $media == mediumPhone {
		@media only screen and ( max-height: 568px ) { @content; }
	}
	@else if $media == extraSmallPhone {
		@media only screen and ( max-height: 400px ) { @content; }
	}
	@else if $media == phone {
		@media only screen and ( max-width: 600px ) { @content; }
	}
	@else if $media == tablet {
		@media only screen and ( min-width: 600px ) { @content; }
	}
	@else if $media == potraitTablet {
		@media only screen and ( min-width: 600px ) and ( max-width: 1023px ){ @content; }
	}
	@else if $media == landscapeTablet {
		@media only screen and ( min-width: 1024px ) { @content; }
	}
}

@mixin respond-to-desktop($media) {
	@if $media == mobile {
		@media only screen and ( max-width: 767px ) { @content; }
	}
	@else if $media == tablet {
		@media only screen and ( min-width: 768px ) { @content; }
	}
	@else if $media == smallDesktop {
		@media only screen and ( min-width: 980px ) { @content; }
	}
	@else if $media == desktop {
		@media only screen and ( min-width: 1200px ) { @content; }
	}
	@else if $media == largeDesktop {
		@media only screen and ( min-width: 1650px ) { @content; }
	}
}

// Incrementa l'area cliccabile
@mixin touchable($size: 10px) {
	&:after {
		position: absolute;
		content: '';
		top: -$size;
		right: -$size;
		bottom: -$size;
		left: -$size;
	}
}

// Center box
@mixin center-box($top, $left) {
	position: absolute;
	top: $top;
	left: $left;
	transform: translate3d(-50%, -50%, 0);
}

// Text truncate on multi-line
@mixin text-truncate($line) {
	@if $line == 1 {
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}@else{
		display: -webkit-box;
		-webkit-line-clamp: $line;
		-webkit-box-orient: vertical;
	}
}

// Add style from root
@mixin at-root($class) {
	@at-root #{$class} #{&} {
		@content;
	}
}

// Short-cut form no-touch class
@mixin no-touch() {
	@include at-root('no-touch');
}


@mixin input-placeholder($color) {
	&::-webkit-input-placeholder {
		color: $color;
	}
	&:-moz-placeholder {
		color: $color;
	}
	&::-moz-placeholder { //for newer versions of Firefox
		color: $color;
	}
	&:-ms-input-placeholder {
		color: $color;
	}
}

@mixin appearance($appearance) {
	-webkit-appearance: $appearance;
	-moz-appearance: $appearance;
	-ms-appearance: $appearance;
	appearance: $appearance;
}

@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

@mixin rotate($deg) {
	@include transform(rotate(#{$deg}deg));
}

@mixin scale($scale) {
	@include transform(scale($scale));
}

@mixin translate3d($x, $y, $z) {
	@include transform(translate3d($x, $y, $z));
}

@mixin skew($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin transform-origin($origin) {
	-moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
	transform-origin: $origin;
}

@mixin transition($transitions...) {
	-moz-transition: $transitions;
	-o-transition: $transitions;
	-ms-transition: $transitions;
	-webkit-transition: $transitions;
	transition: $transitions;
}

@mixin icon($char: null, $size: null, $color: null) {
	@if ($size) {
		font-size: $size;
	}
	&:before {
		vertical-align: $icon-vertical-align;
		@if $char {
			content: $char;
		}
		@if $color {
			color: $color;
		}
	}
}
